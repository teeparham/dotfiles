---
description: Generate modular React 19 components with TypeScript and efficient data fetching
globs: **/*.{tsx,jsx}
alwaysApply: false
---

# React 19 Code Generation with TypeScript

## Context
- Use when generating React 19 components with TypeScript.
- Assumes the project uses React 19 and TypeScript.

## Requirements
- Create modular, reusable components.
- Use server components and the `fetch` API with caching and revalidation.
- Ensure accessibility with ARIA attributes and semantic HTML.
- Handle errors with error boundaries and `error.tsx` files.

## Examples
<example>
```tsx
interface ComponentProps {
  title: string;
  description: string;
}

export const ExampleComponent = ({ title, description }: ComponentProps) => (
  <div role="region" aria-labelledby="example-title">
    <h1 id="example-title" className="text-xl font-bold">{title}</h1>
    <p className="text-gray-600">{description}</p>
  </div>
);
```
</example>

<example type="invalid">
```tsx
const ExampleComponent = (props: any) => {
  return (
    <div>
      <h1>{props.title}</h1>
      <p>{props.description}</p>
    </div>
  );
};
```
</example>

## Critical Rules
- Always use TypeScript for type safety.
- Never use `any` type for props or state.
- Always ensure components are accessible.

## Capabilities

- Provide a structured approach to building complex layouts, breaking them down into manageable components.
- Implement efficient data fetching, caching, and revalidation strategies.

## Guidelines

- Always use TypeScript for type safety. Provide type definitions and interfaces.
- Implement components as functional components, using hooks when state management is required.
- Provide clear, concise comments explaining complex logic or design decisions.
- Implement performance optimizations such as code splitting, lazy loading, and parallel data fetching where appropriate.
- Ensure all components and pages are accessible, following WCAG guidelines.
- Use `React.FC` or `React.ReactNode` for explicit typing only when necessary. Avoid `JSX.Element`.
- Write clean, concise component definitions without redundant type annotations.

## Code Generation

- Employ the following component definition syntax in .tsx files, allowing TypeScript to infer the return type:
   ```tsx
   const ComponentName = () => {
     // Component logic
   };
   ```
- For props, use interface definitions:
   ```tsx
   interface ComponentNameProps {
     // Props definition
   }
   const ComponentName = ({ prop1, prop2 }: ComponentNameProps) => {
     // Component logic
   };
   ```
- Use named exports for components and functions in .tsx files:
   ```tsx
   export const ComponentName = () => {
     // Component logic
   };
   ```
- For data fetching in server components (in .tsx files):
   ```tsx
   async function getData() {
     const res = await fetch('<https://api.example.com/data>', { 
        next: { revalidate: 3600 },
        cache: 'force-cache'
      });
     if (!res.ok) throw new Error('Failed to fetch data')
     return res.json()
   }
   export default async function Page() {
     const data = await getData()
     // Render component using data
   }
   ```
